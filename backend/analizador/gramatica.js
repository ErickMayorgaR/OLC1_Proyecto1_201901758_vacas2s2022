/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,19],$V2=[1,18],$V3=[1,33],$V4=[1,21],$V5=[1,26],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[5,21,28,30,33,37,45,47,54,56,57,58,76,77,78,79,80],$Vh=[1,47],$Vi=[1,60],$Vj=[1,55],$Vk=[1,53],$Vl=[1,54],$Vm=[1,56],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[2,19],$Vr=[1,63],$Vs=[1,64],$Vt=[5,21,28,30,33,35,37,45,47,54,56,57,58,76,77,78,79,80],$Vu=[1,76],$Vv=[1,75],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[8,26,47,55,60,61,62,63,64,65,66,67,68,69,70],$VG=[1,120],$VH=[24,26],$VI=[8,26,47,55,62,63,64,65],$VJ=[8,26,47,55,62,63,64,65,66,67,68,69,70],$VK=[1,140],$VL=[42,46],$VM=[1,169],$VN=[1,164],$VO=[1,162],$VP=[1,163],$VQ=[1,165],$VR=[1,166],$VS=[1,167],$VT=[1,168],$VU=[1,175],$VV=[1,174],$VW=[1,176],$VX=[1,177],$VY=[1,180],$VZ=[1,181],$V_=[1,182],$V$=[1,183],$V01=[1,184],$V11=[8,60,61,62,63,64,65,66,67,68,69,70],$V21=[8,62,63,64,65],$V31=[8,62,63,64,65,66,67,68,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"puntocoma":8,"DECLARACION_FUNCION":9,"DECLARACION_METODO":10,"ASIGNACIONVAR":11,"IF_INS":12,"SWITCH":13,"FOR":14,"WHILE":15,"PRINT":16,"RETURN":17,"BREAK":18,"CONTINUE":19,"TYPE":20,"id":21,"igual":22,"EXPRESION":23,"coma":24,"parentesisaper":25,"parentesiscierre":26,"llaveaper":27,"llavecierre":28,"PARAMETROS":29,"void":30,"INS_IF":31,"MULTI_ELSE":32,"if_sen":33,"ELSE":34,"else":35,"if":36,"switch":37,"SWITCHCASES":38,"CASES":39,"DEFAULT":40,"CASE":41,"case":42,"entero":43,"dospuntos":44,"break":45,"default":46,"for":47,"EXPRESION_FOR":48,"ACTUALIZACION":49,"INICIOFOR":50,"ACTUALIZACIONFOR":51,"incremento":52,"reduccion":53,"while":54,"do":55,"imprimir":56,"return":57,"continue":58,"PARAMETRO":59,"menos":60,"mas":61,"por":62,"dividido":63,"and":64,"or":65,"menor":66,"menorigual":67,"mayor":68,"mayorigual":69,"igualigual":70,"cadena":71,"decimal":72,"true":73,"false":74,"caracter":75,"int":76,"double":77,"bool":78,"resstring":79,"char":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntocoma",21:"id",22:"igual",24:"coma",25:"parentesisaper",26:"parentesiscierre",27:"llaveaper",28:"llavecierre",30:"void",33:"if_sen",35:"else",36:"if",37:"switch",42:"case",43:"entero",44:"dospuntos",45:"break",46:"default",47:"for",52:"incremento",53:"reduccion",54:"while",55:"do",56:"imprimir",57:"return",58:"continue",60:"menos",61:"mas",62:"por",63:"dividido",64:"and",65:"or",66:"menor",67:"menorigual",68:"mayor",69:"mayorigual",70:"igualigual",71:"cadena",72:"decimal",73:"true",74:"false",75:"caracter",76:"int",77:"double",78:"bool",79:"resstring",80:"char"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[7,4],[7,4],[7,2],[11,3],[9,7],[9,8],[10,7],[10,8],[12,1],[12,2],[31,7],[32,2],[32,1],[34,4],[34,5],[13,6],[38,2],[39,2],[39,1],[41,9],[40,4],[14,14],[50,4],[51,3],[49,2],[49,2],[15,7],[15,9],[16,4],[17,2],[17,1],[18,1],[19,1],[29,3],[29,1],[59,2],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[20,1],[20,1],[20,1],[20,1],[20,1],[48,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,4],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		instrucciones = $$[$0-1]; 
		let resultado = ""
		for (var i = 0; i < instrucciones.length; i++){
			resultado += $$[$0-1][i]
		}

		return {
			salida: resultado,
			errores: reportes,
			consolaPrint: traducir.contenidoPrint,
		};
	
break;
case 2:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$ = [$$[$0]];
break;
case 4:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			  reportes.putError({lexema:yytext, fila: this._$.first_line, columna:this._$.first_column, tipo: "SINTACTICO" })
			
break;
case 5:
this.$ = $$[$0-1] + "\n"; console.log("declarar variable", $$[$0-1]);
break;
case 6: case 7:
this.$ = $$[$0] + "\n";
break;
case 8: case 13: case 14: case 16:
this.$ = $$[$0-1];
break;
case 9: case 10: case 11: case 12: case 15:
this.$ = $$[$0];
break;
case 17:
this.$ = $$[$0-2] +  $$[$0-1] + $$[$0] ; console.log("declarando variable", $$[$0-3]);
break;
case 18:
 this.$ = $$[$0-2] +  $$[$0-1] + $$[$0] ;
break;
case 19:
this.$ = $$[$0] + " = " + "null" ;
break;
case 20:
this.$ = $$[$0-2] +  $$[$0-1] + $$[$0] ;console.log("asignando variable", $$[$0-2])
break;
case 21: case 23:
this.$ = traducir.funcionYMetodoVacio($$[$0-5], $$[$0-1]);
break;
case 22: case 24:
this.$ = traducir.funcionYMetodo($$[$0-6],$$[$0-4], $$[$0-1]);
break;
case 25: case 47: case 48: case 49: case 51:
this.$ = $$[$0]
break;
case 26: case 33:
this.$ = $$[$0-1] + $$[$0]
break;
case 27:
this.$ = traducir.sentenciaIf($$[$0-4], $$[$0-1]); console.log("terminando if", $$[$0-4]);
break;
case 28:
 this.$ = $$[$0-1] + $$[$0]
break;
case 29: case 52: case 67: case 91:
 this.$ = $$[$0]
break;
case 30:
this.$ = traducir.sentenciaElse($$[$0-1], "else:");
break;
case 31:
this.$ = traducir.sentenciaElse($$[$0-2], "elif:");
break;
case 32:
this.$ = traducir.sentenciaSwitch() + $$[$0]
break;
case 34:
this.$ = $$[$0-1] + $$[$0]; console.log("terminando switch", $$[$0])
break;
case 35:
this.$ = $$[$0]; console.log("terminando case", $$[$0])
break;
case 36:
 this.$ = traducir.casesParaSwitch($$[$0-7], $$[$0-5] , $$[$0-3])
break;
case 37:
this.$ = $$[$0-3]
break;
case 38:
this.$ = traducir.sentenciaFor($$[$0-10], $$[$0-8], $$[$0-6], $$[$0-1])
break;
case 39:
this.$  = $$[$0-2]
break;
case 40: case 50:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]
break;
case 41: case 42:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 43:
this.$ = traducir.sentenciaWhile(true, $$[$0-4], $$[$0-1], "")
break;
case 44:
 this.$ = traducir.sentenciaWhile(false, $$[$0-6],$$[$0-3], $$[$0-8])
break;
case 45:
this.$ = traducir.traducirPrint($$[$0-1])
break;
case 46:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 53: case 77:
 this.$ = $$[$0] *-1 
break;
case 54:
 this.$ = $$[$0-2] + " + " +  $$[$0] 
break;
case 55:
 this.$ = $$[$0-2] + " - " + $$[$0] 
break;
case 56:
 this.$ = $$[$0-2] + " * " + $$[$0]
break;
case 57: case 81:
 this.$ = + $$[$0-2] + " / " + $$[$0] 
break;
case 58: case 82:
 this.$ =  $$[$0-2] + "&&" + $$[$0]; 
break;
case 59:
 this.$ =  $$[$0-2] + " || " + $$[$0]; 
break;
case 60:
 this.$ = $$[$0-2] + " < " + $$[$0]; 
break;
case 61:
 this.$ = $$[$0-2] + " <= " + $$[$0] 
break;
case 62:
 this.$ =  $$[$0-2]  + " > " + $$[$0] 
break;
case 63:
 this.$ = $$[$0-2] + " >= " + $$[$0] 
break;
case 64:
 this.$ = $$[$0-2] + " == " + $$[$0]
break;
case 65: case 89:
 this.$ = '"' + $$[$0] + '"' 
break;
case 66: case 69: case 90: case 93:
 this.$ = $$[$0]; 
break;
case 68: case 92:
 this.$ = $$[$0] 
break;
case 70: case 94:
this.$ = "'" + $$[$0] + "'" 
break;
case 71: case 95:
this.$ = $$[$0]; console.log("identificador", $$[$0]);
break;
case 72:
console.log("reconociendo string", $$[$0]); this.$ = Type.ENTERO
break;
case 73:
this.$ = Type.DOUBLE
break;
case 74:
this.$ = Type.BOOLEANO
break;
case 75:
this.$ = Type.CADENA
break;
case 76:
this.$ = Type.CARACTER
break;
case 78: case 79: case 80: case 84: case 85: case 86: case 87: case 88:
 this.$ =  $$[$0]; 
break;
case 83:
 this.$ =  $$[$0-3] + " || " + $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{1:[3]},{5:[1,34],6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{8:[1,36]},o($Vg,[2,6]),o($Vg,[2,7]),{8:[1,37],55:[1,38]},o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),{8:[1,39]},{8:[1,40]},o($Vg,[2,15]),{8:[1,41]},{21:[1,42]},{21:[1,43]},{22:[1,44]},o($Vg,[2,25],{32:45,34:46,35:$Vh}),{25:[1,48]},{25:[1,49]},{25:[1,50]},{25:[1,51]},{8:[2,47],21:$Vi,23:52,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($Vg,[2,48]),{8:[2,49]},{21:[2,72]},{21:[2,73]},{21:[2,74]},{21:[2,75]},{21:[2,76]},{25:[1,61]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),o($Vg,[2,8]),{27:[1,62]},o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,16]),{8:$Vq,22:$Vr,24:$Vs,25:[1,65]},{25:[1,66]},{21:$Vi,23:67,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($Vg,[2,26],{34:68,35:$Vh}),o($Vt,[2,29]),{27:[1,69],36:[1,70]},{21:$Vi,23:71,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{20:72,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{21:$Vi,23:73,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:74,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{8:[2,46],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{21:$Vi,23:86,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($VF,[2,65]),o($VF,[2,66]),o($VF,[2,67]),o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),{21:$Vi,23:87,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{2:$V0,4:88,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{21:$Vi,23:89,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{7:90,20:91,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{20:95,26:[1,92],29:93,59:94,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{20:95,26:[1,96],29:97,59:94,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o([8,55],[2,20],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($Vt,[2,28]),{2:$V0,4:98,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{27:[1,99]},{26:[1,100],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{21:[1,101]},{26:[1,102],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{26:[1,103],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{21:$Vi,23:104,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:105,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:106,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:107,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:108,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:109,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:110,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:111,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:112,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:113,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$Vi,23:114,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($VF,[2,53]),{26:[1,115],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,116],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{8:[2,17],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{8:[2,18]},{21:[1,117]},{27:[1,118]},{24:$VG,26:[1,119]},o($VH,[2,51]),{21:[1,121]},{27:[1,122]},{24:$VG,26:[1,123]},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,124],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{2:$V0,4:125,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{27:[1,126]},{22:[1,127]},{27:[1,128]},{8:[2,45]},o($VF,[2,54]),o($VF,[2,55]),o($VI,[2,56],{60:$Vu,61:$Vv,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VI,[2,57],{60:$Vu,61:$Vv,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o([8,26,47,55,64,65],[2,58],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o([8,26,47,55,65],[2,59],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE}),o($VJ,[2,60],{60:$Vu,61:$Vv}),o($VJ,[2,61],{60:$Vu,61:$Vv}),o($VJ,[2,62],{60:$Vu,61:$Vv}),o($VJ,[2,63],{60:$Vu,61:$Vv}),o($VJ,[2,64],{60:$Vu,61:$Vv}),{27:[1,129]},{54:[1,130]},{8:$Vq,22:$Vr,24:$Vs},{2:$V0,4:131,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{27:[1,132]},{20:95,59:133,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VH,[2,52]),{2:$V0,4:134,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{27:[1,135]},o($Vt,[2,30]),{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,136],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{38:137,39:138,41:139,42:$VK},{21:$Vi,23:141,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{2:$V0,4:142,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{2:$V0,4:143,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{25:[1,144]},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,145],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{2:$V0,4:146,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VH,[2,50]),{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,147],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{2:$V0,4:148,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vt,[2,31]),o($Vg,[2,32]),{40:149,41:150,42:$VK,46:[1,151]},o($VL,[2,35]),{43:[1,152]},{8:[1,153],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,154],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,155],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{21:$Vi,23:156,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($Vg,[2,21]),{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,157],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vg,[2,23]),{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,158],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($Vg,[2,33]),o($VL,[2,34]),{44:[1,159]},{44:[1,160]},{21:$VM,43:$VN,48:161,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($Vg,[2,43]),o($Vt,[2,27]),{26:[1,170],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($Vg,[2,22]),o($Vg,[2,24]),{2:$V0,4:171,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{21:[1,172]},{8:[1,173],60:$VU,61:$VV,62:$VW,63:$VX,64:[1,178],65:[1,179],66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01},{21:$Vi,23:185,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},o($V11,[2,89]),o($V11,[2,90]),o($V11,[2,91]),o($V11,[2,92]),o($V11,[2,93]),o($V11,[2,94]),o($V11,[2,95]),o($Vg,[2,44]),{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,186],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{22:[1,187]},{21:[1,189],49:188},{21:$VM,43:$VN,48:190,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:191,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:192,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:193,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:194,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$Vi,23:195,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{21:$VM,43:$VN,48:196,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:197,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:198,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:199,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},{21:$VM,43:$VN,48:200,60:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT},o($V11,[2,77]),o($Vg,[2,37]),{21:$Vi,23:201,43:$Vj,60:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo,75:$Vp},{26:[1,202]},{52:[1,203],53:[1,204]},o($V11,[2,78]),o($V11,[2,79]),o($V21,[2,80],{60:$VU,61:$VV,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01}),o($V21,[2,81],{60:$VU,61:$VV,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01}),o([8,64,65],[2,82],{60:$VU,61:$VV,62:$VW,63:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01}),{14:205,47:$V6,60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},o($V31,[2,84],{60:$VU,61:$VV}),o($V31,[2,85],{60:$VU,61:$VV}),o($V31,[2,86],{60:$VU,61:$VV}),o($V31,[2,87],{60:$VU,61:$VV}),o($V31,[2,88],{60:$VU,61:$VV}),{8:[1,206],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE},{27:[1,207]},{26:[2,41]},{26:[2,42]},o($V11,[2,83]),{45:[1,208]},{2:$V0,4:209,6:3,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{8:[1,210]},{6:35,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,28:[1,211],30:$V2,31:20,33:$V3,37:$V4,45:$V5,47:$V6,54:$V7,56:$V8,57:$V9,58:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},o($VL,[2,36]),o([5,8,21,28,30,33,37,45,47,54,56,57,58,60,61,62,63,64,65,66,67,68,69,70,76,77,78,79,80],[2,38])],
defaultActions: {27:[2,49],28:[2,72],29:[2,73],30:[2,74],31:[2,75],32:[2,76],34:[2,1],90:[2,18],103:[2,45],203:[2,41],204:[2,42]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const TraducirAPython = require('./TraducirAPython.js')
	const Reportes = require('./reportes.js');
	const Declaracion = require('./Declaracion.js');
	const SymbolTable = require('./tabla_simbolos.js');
	const Type = require('./tipo.js')
	var reportes = new Reportes();
	var tabla_simbolo = new SymbolTable(null);
	tabla_simbolo.reportes = reportes;

	var instrucciones = [];
	var traducir = new TraducirAPython();

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 52
break;
case 4:return 53
break;
case 5:return 76;
break;
case 6:return 77;
break;
case 7:return 80;
break;
case 8:return 78;
break;
case 9:return 79;
break;
case 10:return 30;
break;
case 11:return 'null';
break;
case 12:return 'integer';
break;
case 13:return 73;
break;
case 14:return 74;
break;
case 15:return 33;
break;
case 16:return 35;
break;
case 17:return 37
break;
case 18:return 47;
break;
case 19:return 54;
break;
case 20:return 55;
break;
case 21:return 56;
break;
case 22:return 57;
break;
case 23:return 58;
break;
case 24:return "case"
break;
case 25:return "default"
break;
case 26:return "break"
break;
case 27:return 61;
break;
case 28:return 60;
break;
case 29:return 62;
break;
case 30:return 63;
break;
case 31:return 64
break;
case 32:return 65
break;
case 33:return 'not'
break;
case 34:return 68
break;
case 35:return 66
break;
case 36:return 69
break;
case 37:return 67
break;
case 38:return 70
break;
case 39:return 'diferente'
break;
case 40:return 27;     
break;
case 41:return 28;
break;
case 42:return 25;     
break;
case 43:return 26;
break;
case 44:return 24;
break;
case 45:return 'punto';
break;
case 46:return 22;
break;
case 47:return 8
break;
case 48:return 44
break;
case 49:return 21;
break;
case 50:return 72
break;
case 51:return 43
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 53:yy_.yytext = yy_.yytext.substring(1,yy_.yytext.length-1) 
                                                         yy_.yytext = yy_.yytext.replace(/\\n/g, '\n')
                                                         yy_.yytext = yy_.yytext.replace(/\\r/g, '\r')
                                                         yy_.yytext = yy_.yytext.replace(/\\t/g, '\t')
                                                         yy_.yytext = yy_.yytext.replace(/\\\'/g, '\'')
                                                         //yy_.yytext = yy_.yytext.replace(/\\\"/g, '\"')
                                                         //yy_.yytext = yy_.yytext.replace(/\\\\/g, '\\')
                                                         return'cadena';
break;
case 54:return 5;
break;
case 55: reportes.putError({lexema:yy_.yytext, fila: this._$.first_line, columna:this._$.first_column, tipo: "LEXICO" }) 
break;
}
},
rules: [/^(?:[\n\t\s\r]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:Console\.Write\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\.)/i,/^(?:=)/i,/^(?:;)/i,/^(?::)/i,/^(?:([a-zA-Z_])[a-z0-9A-Z_Ã±Ã]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])')/i,/^(?:[\"](\\n|\\r|\\t|\\'|\\"|\\\\|[^\"])*[\"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}